//******************************************************************************
//  @file NVM.h
//  @author Nicolai Shlapunov
//
//  @details NVM: NVM Class, header
//
//  @copyright Copyright (c) 2023, Devtronic & Nicolai Shlapunov
//             All rights reserved.
//
//  @section SUPPORT
//
//   Devtronic invests time and resources providing this open source code,
//   please support Devtronic and open-source hardware/software by
//   donations and/or purchasing products from Devtronic.
//
//******************************************************************************

#ifndef NVM_h
#define NVM_h

// *****************************************************************************
// ***   Includes   ************************************************************
// *****************************************************************************
#include "DevCfg.h"

#include "Eeprom24.h"

// *****************************************************************************
// ***   Local const variables   ***********************************************
// *****************************************************************************

// *****************************************************************************
// ***   Defines   *************************************************************
// *****************************************************************************

// *****************************************************************************
// ***   NVM Class   ***********************************************************
// *****************************************************************************
class NVM
{
  public:
    // *************************************************************************
    // ***   Get Instance   ****************************************************
    // *************************************************************************
    static NVM& GetInstance();

    // *************************************************************************
    // ***   Init function   ***************************************************
    // *************************************************************************
    Result Init(Eeprom24& in_eep);

    // *************************************************************************
    // ***   ReadData function   ***********************************************
    // *************************************************************************
    Result ReadData(void);

    // *************************************************************************
    // ***   WriteData function   **********************************************
    // *************************************************************************
    Result WriteData(void);

    // *************************************************************************
    // ***   GetCtrlTx function   **********************************************
    // *************************************************************************
    uint8_t GetCtrlTx() {return data.tx_ctrl;}

    // *************************************************************************
    // ***   SetCtrlTx function   **********************************************
    // *************************************************************************
    Result SetCtrlTx(uint8_t tx_ctrl) {data.tx_ctrl = tx_ctrl; return WriteData();}

    // *************************************************************************
    // ***   GetDisplayInvert function   ***************************************
    // *************************************************************************
    bool GetDisplayInvert() {return data.invert_display;}

    // *************************************************************************
    // ***   SetDisplayInvert function   ***************************************
    // *************************************************************************
    Result SetDisplayInvert(bool invert_display) {data.invert_display = invert_display; return WriteData();}

    // *************************************************************************
    // ***   GetProbeSearchSpeed function   ************************************
    // *************************************************************************
    uint32_t GetProbeSearchSpeed() {return data.search_speed;}

    // *************************************************************************
    // ***   SetProbeSearchSpeed function   ************************************
    // *************************************************************************
    Result SetProbeSearchSpeed(uint32_t speed) {data.search_speed = speed; return WriteData();}

    // *************************************************************************
    // ***   GetProbeLockSpeed function   **************************************
    // *************************************************************************
    uint32_t GetProbeLockSpeed() {return data.lock_speed;}

    // *************************************************************************
    // ***   SetProbeLockSpeed function   **************************************
    // *************************************************************************
    Result SetProbeLockSpeed(uint32_t speed) {data.lock_speed = speed; return WriteData();}

    // *************************************************************************
    // ***   GetProbeTipDiameter function   ************************************
    // *************************************************************************
    uint32_t GetProbeTipDiameter() {return data.ball_tip;}

    // *************************************************************************
    // ***   SetProbeTipDiameter function   ************************************
    // *************************************************************************
    Result SetProbeTipDiameter(uint32_t ball) {data.ball_tip = ball; return WriteData();}

  private:

    // Pointer to EEPROM object
    Eeprom24* eep = nullptr;

    // Struct with all settings we want to store in EEPROM
    typedef struct
    {
      uint8_t tx_ctrl = 2u; // Pin & Software command by default
      uint8_t invert_display = false;
      // Probing
      uint32_t search_speed = 200u;
      uint32_t lock_speed = 50u;
      uint32_t ball_tip = 2000u;
      // CRC
      uint32_t crc = 0u;
    } Nvm_t;
    // Data
    Nvm_t data;

    // *************************************************************************
    // ***   Private constructor   *********************************************
    // *************************************************************************
    NVM() {};
};

#endif
